//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#include "nanoFramework_Hardware_Esp32.h"
#include "nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadBase.h"

using namespace nanoFramework::Hardware::Esp32::TouchPad;


HRESULT Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadBase::TouchPadInit___BOOLEAN( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        bool retVal = TouchPadBase::TouchPadInit( pMngObj,  hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadBase::TouchPadSetFsmMode___BOOLEAN__nanoFrameworkHardwareEsp32TouchPadTouchFsmMode( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param0 ) );

        bool retVal = TouchPadBase::TouchPadSetFsmMode( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadBase::TouchPadSetVoltage___BOOLEAN__nanoFrameworkHardwareEsp32TouchPadTouchHighVolt__nanoFrameworkHardwareEsp32TouchPadTouchLowVolt__nanoFrameworkHardwareEsp32TouchPadTouchVoltAtten( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param0 ) );

        signed int param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 2, param1 ) );

        signed int param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param2 ) );

        bool retVal = TouchPadBase::TouchPadSetVoltage( pMngObj,  param0, param1, param2, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadBase::TouchPadConfig___BOOLEAN__I4__U2( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param0 ) );

        unsigned short param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT16( stack, 2, param1 ) );

        bool retVal = TouchPadBase::TouchPadConfig( pMngObj,  param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadBase::TouchPadSetFilterPeriod___BOOLEAN__U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        unsigned int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 1, param0 ) );

        bool retVal = TouchPadBase::TouchPadSetFilterPeriod( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadBase::TouchPadRead___U2__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param0 ) );

        unsigned short retVal = TouchPadBase::TouchPadRead( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_UINT16( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadBase::TouchPadReadFiltered___U2__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param0 ) );

        unsigned short retVal = TouchPadBase::TouchPadReadFiltered( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_UINT16( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadBase::TouchPadSetThresh___BOOLEAN__I4__U2( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        signed int param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param0 ) );

        unsigned short param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT16( stack, 2, param1 ) );

        bool retVal = TouchPadBase::TouchPadSetThresh( pMngObj,  param0, param1, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadBase::DisposeNative___VOID( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        TouchPadBase::DisposeNative( pMngObj,  hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}
