//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#ifndef _NANOFRAMEWORK_HARDWARE_ESP32_H_
#define _NANOFRAMEWORK_HARDWARE_ESP32_H_

#include <nanoCLR_Interop.h>
#include <nanoCLR_Runtime.h>
struct Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_Logging
{
    NANOCLR_NATIVE_DECLARE(NativeSetLogLevel___STATIC__VOID__STRING__I4);

    //--//

};

struct Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_Sleep
{
    NANOCLR_NATIVE_DECLARE(NativeEnableWakeupByTimer___STATIC__nanoFrameworkHardwareEsp32EspNativeError__U8);
    NANOCLR_NATIVE_DECLARE(NativeEnableWakeupByPin___STATIC__nanoFrameworkHardwareEsp32EspNativeError__nanoFrameworkHardwareEsp32SleepWakeupGpioPin__I4);
    NANOCLR_NATIVE_DECLARE(NativeEnableWakeupByMultiPins___STATIC__nanoFrameworkHardwareEsp32EspNativeError__nanoFrameworkHardwareEsp32SleepWakeupGpioPin__nanoFrameworkHardwareEsp32SleepWakeupMode);
    NANOCLR_NATIVE_DECLARE(NativeEnableWakeupByTouchPad___STATIC__nanoFrameworkHardwareEsp32EspNativeError);
    NANOCLR_NATIVE_DECLARE(NativeStartLightSleep___STATIC__nanoFrameworkHardwareEsp32EspNativeError);
    NANOCLR_NATIVE_DECLARE(NativeStartDeepSleep___STATIC__nanoFrameworkHardwareEsp32EspNativeError);
    NANOCLR_NATIVE_DECLARE(NativeGetWakeupCause___STATIC__nanoFrameworkHardwareEsp32SleepWakeupCause);
    NANOCLR_NATIVE_DECLARE(NativeGetWakeupGpioPin___STATIC__nanoFrameworkHardwareEsp32SleepWakeupGpioPin);
    NANOCLR_NATIVE_DECLARE(NativeGetWakeupTouchpad___STATIC__nanoFrameworkHardwareEsp32SleepTouchPad);

    //--//

};

struct Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadBase
{
    static const int FIELD_STATIC__GpioTouchPadMap = 0;

    static const int FIELD___syncLock = 65535;
    static const int FIELD___pinNumber = 65535;
    static const int FIELD___touchPadIndex = 65535;
    static const int FIELD___disposedValue = 65535;

    NANOCLR_NATIVE_DECLARE(TouchPadInit___BOOLEAN);
    NANOCLR_NATIVE_DECLARE(TouchPadSetFsmMode___BOOLEAN__nanoFrameworkHardwareEsp32TouchPadTouchFsmMode);
    NANOCLR_NATIVE_DECLARE(TouchPadSetVoltage___BOOLEAN__nanoFrameworkHardwareEsp32TouchPadTouchHighVolt__nanoFrameworkHardwareEsp32TouchPadTouchLowVolt__nanoFrameworkHardwareEsp32TouchPadTouchVoltAtten);
    NANOCLR_NATIVE_DECLARE(TouchPadConfig___BOOLEAN__I4__U2);
    NANOCLR_NATIVE_DECLARE(TouchPadSetFilterPeriod___BOOLEAN__U4);
    NANOCLR_NATIVE_DECLARE(TouchPadRead___U2__I4);
    NANOCLR_NATIVE_DECLARE(TouchPadReadFiltered___U2__I4);
    NANOCLR_NATIVE_DECLARE(TouchPadSetThresh___BOOLEAN__I4__U2);
    NANOCLR_NATIVE_DECLARE(DisposeNative___VOID);

    //--//

};

struct Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_HighResEventListener
{
    static const int FIELD__HighResTimers = 65535;


    //--//

};

struct Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_HighResTimer
{
    static const int FIELD_STATIC__s_eventListener = 1;

    static const int FIELD___timerHandle = 65535;
    static const int FIELD___disposedValue = 65535;
    static const int FIELD___syncLock = 65535;
    static const int FIELD__OnHighResTimerExpired = 65535;

    NANOCLR_NATIVE_DECLARE(NativeEspTimerCreate___I4);
    NANOCLR_NATIVE_DECLARE(NativeEspTimerDispose___VOID);
    NANOCLR_NATIVE_DECLARE(NativeStop___VOID);
    NANOCLR_NATIVE_DECLARE(NativeStartOneShot___VOID__U8);
    NANOCLR_NATIVE_DECLARE(NativeStartPeriodic___VOID__U8);
    NANOCLR_NATIVE_DECLARE(NativeGetCurrent___STATIC__U8);

    //--//

};

struct Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_HighResTimerEvent
{
    static const int FIELD__EventType = 65535;
    static const int FIELD__TimerHandle = 65535;


    //--//

};

struct Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadBaseConfig
{
    // Something wrong with this field. Possibly its backing field is missing (mandatory for nanoFramework).
    // <TouchHighVolt>k__BackingField
    static const int FIELD__**THIS_FIELD_IS_NOT_CORRECT_CHECK_MANAGED_CODE** = 65535;
    // Something wrong with this field. Possibly its backing field is missing (mandatory for nanoFramework).
    // <TouchLowVolt>k__BackingField
    static const int FIELD__**THIS_FIELD_IS_NOT_CORRECT_CHECK_MANAGED_CODE** = 65535;
    // Something wrong with this field. Possibly its backing field is missing (mandatory for nanoFramework).
    // <TouchVoltAtten>k__BackingField
    static const int FIELD__**THIS_FIELD_IS_NOT_CORRECT_CHECK_MANAGED_CODE** = 65535;
    // Something wrong with this field. Possibly its backing field is missing (mandatory for nanoFramework).
    // <TouchThreshNoUse>k__BackingField
    static const int FIELD__**THIS_FIELD_IS_NOT_CORRECT_CHECK_MANAGED_CODE** = 65535;
    // Something wrong with this field. Possibly its backing field is missing (mandatory for nanoFramework).
    // <TouchPadFilterTouchPeriod>k__BackingField
    static const int FIELD__**THIS_FIELD_IS_NOT_CORRECT_CHECK_MANAGED_CODE** = 65535;


    //--//

};

struct Library_nanoFramework_Hardware_Esp32_nanoFramework_Hardware_Esp32_TouchPad_TouchPadConfig
{
    // Something wrong with this field. Possibly its backing field is missing (mandatory for nanoFramework).
    // <InterruptThresholdValue>k__BackingField
    static const int FIELD__**THIS_FIELD_IS_NOT_CORRECT_CHECK_MANAGED_CODE** = 65535;


    //--//

};



extern const CLR_RT_NativeAssemblyData g_CLR_AssemblyNative_nanoFramework_Hardware_Esp32;

#endif  //_NANOFRAMEWORK_HARDWARE_ESP32_H_
